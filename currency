import squants.{time => st}
st.Minutes(47)
st.Time
st.Time.name
st.Time.primaryUnit
st.Time.MillisecondsPerSecond
st.Time.units
st.Time.apply
val tt = res9
tt("5 min")
tt("5 m")
tt("5 minutes")
tt("5 minute")
tt("5 s")
tt("5 M")
tt("5 d")
tt("5 millis")
tt("5 ms")
tt("5 us")
tt("5 Âµs")
tt("5 ns")
st.Time.symbolToUnit _
st.Time.symbolToUnit("ms")
st.Time.symbolToUnit("m")
st.Time.symbolToUnit("M")
st.Time.dimensionSymbol
st.Time.siUnit
st.Frequency.units
import squants.{market => sm }
sm.defaultCurrencySet
sm.defaultCurrencySet.size
sm.USD.formatted("33")
sm.USD.formatted(" s33")
sm.USD.formatted("$33")
sm.USD.formatDecimals
sm.USD.symbol
sm.AUD.symbol
sm.EUR.symbol
sm.GBP.symbol
sm.CHF.symbol
sm.CNY.symbol
sm.CNY.code
sm.CNY.name
sm.USD.name
sm.Money
sm.Money.name
sm.Money.symbolToUnit _
val tm = res51
sm.MoneyContext
sm.defaultCurrencyMap
sm.defaultMoneyContext
sm.MoneyConversions.dollar
sm.Money.name
sm.Money("CHF 50")
sm.Money("50 CHF")
import sm.defaultMoneyContext
import sm.defaultMoneyContext
defaultMoneyContext
implicit val moneyContext = defaultMoneyContext
sm.Money(33)
sm.Money(33, sm.XAU)
sm.XAU.name
sm.defaultCurrencySet foreach println
sm.defaultCurrencySet foreach (c => println(c.name))
sm.defaultCurrencySet map (c => s"${c.toString take 2}") foreach println
sm.USD.symbol
sm.defaultCurrencySet map (c => s"${c.symbol} ${c.toString take 2}") foreach println
sm.defaultCurrencySet map (c => s"${c.toString take 2} ${c.symbol}" -> c.name) foreach println
sm.defaultCurrencySet map (c => s"${c.toString take 2} ${c.symbol}" -> c.name) toMap
res79
val currencyMap = res79
sm.defaultCurrencySet map (c => s"${c.toString take 2} ${c.symbol}" -> c.name) toMap
import scala.language.postfixOps
sm.defaultCurrencySet map (c => s"${c.toString take 2} ${c.symbol}" -> c.name) toMap
(sm.defaultCurrencySet map (c => s"${c.toString take 2} ${c.symbol}" -> c.name) toMap) foreach println
sm.USD.code
(sm.defaultCurrencySet map (c => s"${c.code take 2} ${c.symbol}" -> c.name) toMap) foreach println
(sm.defaultCurrencySet map (c => s"${c.code take 99} ${c.symbol}" -> c.name) toMap) foreach println
(sm.defaultCurrencySet map (c => s"${c.code take 2} ${c.symbol}" -> c.name) toMap) foreach println
